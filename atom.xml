<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王子凌</title>
  
  <subtitle>陌上人如玉，公子世无双。 | Hello, world.</subtitle>
  <link href="https://ling.im/atom.xml" rel="self"/>
  
  <link href="https://ling.im/"/>
  <updated>2024-04-26T07:19:52.501Z</updated>
  <id>https://ling.im/</id>
  
  <author>
    <name>Sling Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js 实现同端口监听HTTP与HTTPS</title>
    <link href="https://ling.im/20240424/koa-https-https-at-same-port/"/>
    <id>https://ling.im/20240424/koa-https-https-at-same-port/</id>
    <published>2024-04-24T10:42:45.000Z</published>
    <updated>2024-04-26T07:19:52.501Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直在考虑一个简单的小优化。<br>同事们在本地启动 Node.js <strong>HTTPS</strong> 服务后，然后在浏览器里面访问服务的页面时，总是忘了先写协议名<code>https</code>，看到浏览器的出错提示时，才恍然大悟。</p><p>我就想实现一个功能：<strong>只监听一个端口，实现 HTTPS 与 HTTP 请求的监听，且自动将 HTTP 请求 Redirect 到 HTTPS</strong>。</p><p>在<strong>stackoverflow</strong>找到了对应的方法：<a href="https://stackoverflow.com/a/42019773" title="引用于此处，感谢。">https://stackoverflow.com/a/42019773</a></p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>纯 Node.js <strong>原生</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Enable request handler being in HTTPS mode.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> handler &#123;RequestListener&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> httpsConfig &#123;&#123;keyPath: string, certPath: string, [forceHttpsWhenEnabled]: boolean&#125;&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="type">Server &amp; &#123; https: Server, http: Server </span>&#125; &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enableHandlerHttps</span>(<span class="params">handler, httpsConfig</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(httpsConfig.<span class="property">keyPath</span>)),</span><br><span class="line">    <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(httpsConfig.<span class="property">certPath</span>))</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If no need to forcibly redirect HTTP requests to same path HTTPS route.</span></span><br><span class="line">  <span class="keyword">if</span> (!httpsConfig.<span class="property">forceHttpsWhenEnabled</span>) &#123;</span><br><span class="line">    <span class="comment">// OK. Normal flow.</span></span><br><span class="line">    <span class="keyword">return</span> https.<span class="title function_">createServer</span>(options, handler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Automatically redirect http request to https.</span></span><br><span class="line"><span class="comment">   * Only change the protocol.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> https://stackoverflow.com/a/42019773</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> server = net.<span class="title function_">createServer</span>(<span class="function"><span class="params">conn</span> =&gt;</span> &#123;</span><br><span class="line">    conn.<span class="title function_">once</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">buffer</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Pause the socket.</span></span><br><span class="line">      conn.<span class="title function_">pause</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> firstByte = buffer[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> httpReqFirstByteRange = [<span class="number">32</span>, <span class="number">127</span>];</span><br><span class="line">      <span class="keyword">const</span> httpsReqFirstByte = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Determine what proxy we need to use.</span></span><br><span class="line">      <span class="keyword">let</span> protocol;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (firstByte === httpsReqFirstByte) &#123;</span><br><span class="line">        protocol = <span class="string">&#x27;https&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        httpReqFirstByteRange[<span class="number">0</span>] &lt; firstByte &amp;&amp;</span><br><span class="line">        firstByte &lt; httpReqFirstByteRange[<span class="number">1</span>]</span><br><span class="line">      ) &#123;</span><br><span class="line">        protocol = <span class="string">&#x27;http&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> proxy = server[protocol];</span><br><span class="line">      <span class="keyword">if</span> (proxy) &#123;</span><br><span class="line">        <span class="comment">// Push the buffer back onto the front of the data stream.</span></span><br><span class="line">        conn.<span class="title function_">unshift</span>(buffer);</span><br><span class="line">        <span class="comment">// Emit the socket to the HTTP(s) server.</span></span><br><span class="line">        proxy.<span class="title function_">emit</span>(<span class="string">&#x27;connection&#x27;</span>, conn);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// As of NodeJS 10.x the socket must be</span></span><br><span class="line">      <span class="comment">// resumed asynchronously or the socket</span></span><br><span class="line">      <span class="comment">// connection hangs, potentially crashing</span></span><br><span class="line">      <span class="comment">// the process. Prior to NodeJS 10.x</span></span><br><span class="line">      <span class="comment">// the socket may be resumed synchronously.</span></span><br><span class="line">      process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        conn.<span class="title function_">resume</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// HTTP server proxy.</span></span><br><span class="line">  server.<span class="property">http</span> = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Force redirect.</span></span><br><span class="line">    <span class="keyword">const</span> host = req.<span class="property">headers</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="comment">// Use 301 - Moved Permanently.</span></span><br><span class="line">    <span class="comment">// To notify browsers that update the bookmarks and cache the redirection.</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">301</span>, &#123; <span class="title class_">Location</span>: <span class="string">&#x27;https://&#x27;</span> + host + req.<span class="property">url</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// HTTPS server proxy.</span></span><br><span class="line">  server.<span class="property">https</span> = https.<span class="title function_">createServer</span>(options, handler);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Koa-联调"><a href="#Koa-联调" class="headerlink" title="Koa 联调"></a>Koa 联调</h2><p>我们项目使用的 <strong>Koa</strong>，所以联调上方的基础方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">enableHandlerHttps</span>(app.<span class="title function_">callback</span>(), &#123;</span><br><span class="line">  <span class="attr">keyPath</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// HTTPS cert key path.</span></span><br><span class="line">  <span class="attr">certPath</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// HTTPS cert file path.</span></span><br><span class="line">  <span class="attr">forceHttpsWhenEnabled</span>: <span class="literal">true</span> <span class="comment">// Enable.</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Server already started.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前一直在考虑一个简单的小优化。&lt;br&gt;同事们在本地启动 Node.js &lt;strong&gt;HTTPS&lt;/strong&gt; 服务后，然后在浏览器里面访问服务的页面时，总是忘了先写协议名&lt;code&gt;https&lt;/code&gt;，看到浏览器的出错提示时，才恍然大悟。&lt;/p&gt;
&lt;p&gt;我就</summary>
      
    
    
    
    <category term="Node.js" scheme="https://ling.im/categories/Node-js/"/>
    
    
    <category term="Node.js" scheme="https://ling.im/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下 Node.js 提示端口已被占用</title>
    <link href="https://ling.im/20240424/windows-unexpected-eaddrinuse/"/>
    <id>https://ling.im/20240424/windows-unexpected-eaddrinuse/</id>
    <published>2024-04-24T05:24:11.000Z</published>
    <updated>2024-04-26T07:19:52.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可能的错误信息"><a href="#可能的错误信息" class="headerlink" title="可能的错误信息"></a>可能的错误信息</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: listen EADDRINUSE: address already in use :::3000</span><br><span class="line"></span><br><span class="line">Error: listen EACCES permission denied :::3000</span><br></pre></td></tr></table></figure><h2 id="可能的解决办法"><a href="#可能的解决办法" class="headerlink" title="可能的解决办法"></a>可能的解决办法</h2><ol><li><code>3000</code> 端口确实已经被监听。<br>  <strong>&lt;管理员模式&gt;</strong> cmd 运行 <code>netstat -ano|findstr &quot;3000&quot;</code> ，然后找到对应的 <code>PID</code>，例如：<code>1314</code>，然后执行 <code>taskkill -PID 1314 -F </code>。即可解决。</li><li>也许是因为 Hyper-V 或者其他的容器服务保留了该3000端口。<br>  <strong>&lt;管理员模式&gt;</strong> cmd 运行 <code>net stop hns</code>，第一次执行时，会提示输入 <code>y</code> 确认。然后 cmd 运行 <code>net start hns</code>。即可解决。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;可能的错误信息&quot;&gt;&lt;a href=&quot;#可能的错误信息&quot; class=&quot;headerlink&quot; title=&quot;可能的错误信息&quot;&gt;&lt;/a&gt;可能的错误信息&lt;/h2&gt;&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="Node.js" scheme="https://ling.im/categories/Node-js/"/>
    
    <category term="Windows" scheme="https://ling.im/categories/Windows/"/>
    
    
    <category term="Node.js" scheme="https://ling.im/tags/Node-js/"/>
    
    <category term="Windows" scheme="https://ling.im/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Hello, world!</title>
    <link href="https://ling.im/20240423/hello-world/"/>
    <id>https://ling.im/20240423/hello-world/</id>
    <published>2024-04-23T14:16:05.000Z</published>
    <updated>2024-04-26T07:19:52.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h1><p>Thanks for <a href="https://hexo.io/">hexo</a>, <a href="https://xaoxuu.com/wiki/stellar">hexo-them-stellar</a> and <a href="https://pages.github.com/">Github pages</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello world!&quot;&gt;&lt;/a&gt;Hello world!&lt;/h1&gt;&lt;p&gt;Thanks for &lt;a href=&quot;https://hexo</summary>
      
    
    
    
    <category term="杂项" scheme="https://ling.im/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
</feed>
