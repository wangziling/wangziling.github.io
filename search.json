[{"title":"Node.js 实现同端口监听HTTP与HTTPS","path":"/20240424/koa-https-https-at-same-port/","content":"之前一直在考虑一个简单的小优化。\n同事们在本地启动 Node.js **HTTPS** 服务后，然后在浏览器里面访问服务的页面时，总是忘了先写协议名`https`，看到浏览器的出错提示时，才恍然大悟。\n\n我就想实现一个功能：**只监听一个端口，实现 HTTPS 与 HTTP 请求的监听，且自动将 HTTP 请求 Redirect 到 HTTPS**。\n\n在**stackoverflow**找到了对应的方法：[https://stackoverflow.com/a/42019773](https://stackoverflow.com/a/42019773 \"引用于此处，感谢。\")\n\n## 实现代码\n\n纯 Node.js **原生**\n```js\nconst path = require('path');\nconst fs = require('fs');\nconst http = require('http');\nconst https = require('https');\nconst net = require('net');\n\n/**\n* Enable request handler being in HTTPS mode.\n* @param handler {RequestListener}\n* @param httpsConfig {{keyPath: string, certPath: string, [forceHttpsWhenEnabled]: boolean}}\n* @return {Server & { https: Server, http: Server } }\n*/\nfunction enableHandlerHttps(handler, httpsConfig) {\n  const options = {\n    key: fs.readFileSync(path.resolve(httpsConfig.keyPath)),\n    cert: fs.readFileSync(path.resolve(httpsConfig.certPath))\n  };\n\n  // If no need to forcibly redirect HTTP requests to same path HTTPS route.\n  if (!httpsConfig.forceHttpsWhenEnabled) {\n    // OK. Normal flow.\n    return https.createServer(options, handler);\n  }\n\n  /**\n   * Automatically redirect http request to https.\n   * Only change the protocol.\n   * @see https://stackoverflow.com/a/42019773\n   */\n  const net = require('net');\n  const server = net.createServer(conn => {\n    conn.once('data', buffer => {\n      // Pause the socket.\n      conn.pause();\n\n      const firstByte = buffer[0];\n      const httpReqFirstByteRange = [32, 127];\n      const httpsReqFirstByte = 22;\n\n      // Determine what proxy we need to use.\n      let protocol;\n\n      if (firstByte === httpsReqFirstByte) {\n        protocol = 'https';\n      } else if (\n        httpReqFirstByteRange[0] < firstByte &&\n        firstByte < httpReqFirstByteRange[1]\n      ) {\n        protocol = 'http';\n      }\n\n      const proxy = server[protocol];\n      if (proxy) {\n        // Push the buffer back onto the front of the data stream.\n        conn.unshift(buffer);\n        // Emit the socket to the HTTP(s) server.\n        proxy.emit('connection', conn);\n      }\n\n      // As of NodeJS 10.x the socket must be\n      // resumed asynchronously or the socket\n      // connection hangs, potentially crashing\n      // the process. Prior to NodeJS 10.x\n      // the socket may be resumed synchronously.\n      process.nextTick(() => {\n        conn.resume();\n      });\n    });\n  });\n\n  // HTTP server proxy.\n  server.http = http.createServer((req, res) => {\n    // Force redirect.\n    const host = req.headers['host'];\n    // Use 301 - Moved Permanently.\n    // To notify browsers that update the bookmarks and cache the redirection.\n    res.writeHead(301, { Location: 'https://' + host + req.url });\n    res.end();\n  });\n\n  // HTTPS server proxy.\n  server.https = https.createServer(options, handler);\n\n  return server;\n}\n```\n\n## Koa 联调\n\n我们项目使用的 **Koa**，所以联调上方的基础方法：\n```js\nconst app = new Koa();\n\nconst server = enableHandlerHttps(app.callback(), {\n  keyPath: '', // HTTPS cert key path.\n  certPath: '', // HTTPS cert file path.\n  forceHttpsWhenEnabled: true // Enable.\n});\n\nserver.listen(3000, function () {\n  // Server already started.\n});\n```","tags":["Node.js"],"categories":["Node.js"]},{"title":"Windows 下 Node.js 提示端口已被占用","path":"/20240424/windows-unexpected-eaddrinuse/","content":"## 可能的错误信息\n\n```text\nError: listen EADDRINUSE: address already in use :::3000\n\nError: listen EACCES permission denied :::3000\n```\n\n## 可能的解决办法\n\n1. `3000` 端口确实已经被监听。\n  **<管理员模式>** cmd 运行 `netstat -ano|findstr \"3000\"` ，然后找到对应的 `PID`，例如：`1314`，然后执行 `taskkill -PID 1314 -F `。即可解决。\n2. 也许是因为 Hyper-V 或者其他的容器服务保留了该3000端口。\n  **<管理员模式>** cmd 运行 `net stop hns`，第一次执行时，会提示输入 `y` 确认。然后 cmd 运行 `net start hns`。即可解决。","tags":["Node.js","Windows"],"categories":["Node.js","Windows"]},{"title":"Hello, world!","path":"/20240423/hello-world/","content":"# Hello world!\n\nThanks for [hexo](https://hexo.io), [hexo-them-stellar](https://xaoxuu.com/wiki/stellar) and [Github pages](https://pages.github.com/).","categories":["杂项"]},{"title":"关于","path":"/about/index.html","content":"中文哈喽，我叫@Sling, 一个菜鸟级web前端开发。技术栈：Node.js，Vuejs，Typescript，Rust。 EnglishHi there, I'm @Sling, a noob web frontend developer. Tech ability: Node.js，Vuejs，Typescript，Rust."},{"title":"收藏","path":"/bookmark/index.html","content":""},{"title":"Think","path":"/wiki/think/index.html","content":"# Think"},{"title":"Vue","path":"/wiki/vue/index.html","content":"# Vue"}]