[{"title":"Node.js 实现同端口监听HTTP与HTTPS","path":"/20240424/koa-https-https-at-same-port/","content":"之前一直在考虑一个简单的小优化。同事们在本地启动 Node.js HTTPS 服务后，然后在浏览器里面访问服务的页面时，总是忘了先写协议名https，看到浏览器的出错提示时，才恍然大悟。 我就想实现一个功能：只监听一个端口，实现 HTTPS 与 HTTP 请求的监听，且自动将 HTTP 请求 Redirect 到 HTTPS。 在stackoverflow找到了对应的方法：https://stackoverflow.com/a/42019773 实现代码：纯 Node.js 原生 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485const path = require(&#x27;path&#x27;);const fs = require(&#x27;fs&#x27;);const http = require(&#x27;http&#x27;);const https = require(&#x27;https&#x27;);const net = require(&#x27;net&#x27;);/*** Enable request handler being in HTTPS mode.* @param handler &#123;RequestListener&#125;* @param httpsConfig &#123;&#123;keyPath: string, certPath: string, [forceHttpsWhenEnabled]: boolean&#125;&#125;* @return &#123;Server &amp; &#123; https: Server, http: Server &#125; &#125;*/function enableHandlerHttps(handler, httpsConfig) &#123; const options = &#123; key: fs.readFileSync(path.resolve(httpsConfig.keyPath)), cert: fs.readFileSync(path.resolve(httpsConfig.certPath)) &#125;; // If no need to forcibly redirect HTTP requests to same path HTTPS route. if (!httpsConfig.forceHttpsWhenEnabled) &#123; // OK. Normal flow. return https.createServer(options, handler); &#125; /** * Automatically redirect http request to https. * Only change the protocol. * @see https://stackoverflow.com/a/42019773 */ const net = require(&#x27;net&#x27;); const server = net.createServer(conn =&gt; &#123; conn.once(&#x27;data&#x27;, buffer =&gt; &#123; // Pause the socket. conn.pause(); const firstByte = buffer[0]; const httpReqFirstByteRange = [32, 127]; const httpsReqFirstByte = 22; // Determine what proxy we need to use. let protocol; if (firstByte === httpsReqFirstByte) &#123; protocol = &#x27;https&#x27;; &#125; else if ( httpReqFirstByteRange[0] &lt; firstByte &amp;&amp; firstByte &lt; httpReqFirstByteRange[1] ) &#123; protocol = &#x27;http&#x27;; &#125; const proxy = server[protocol]; if (proxy) &#123; // Push the buffer back onto the front of the data stream. conn.unshift(buffer); // Emit the socket to the HTTP(s) server. proxy.emit(&#x27;connection&#x27;, conn); &#125; // As of NodeJS 10.x the socket must be // resumed asynchronously or the socket // connection hangs, potentially crashing // the process. Prior to NodeJS 10.x // the socket may be resumed synchronously. process.nextTick(() =&gt; &#123; conn.resume(); &#125;); &#125;); &#125;); // HTTP server proxy. server.http = http.createServer((req, res) =&gt; &#123; // Force redirect. const host = req.headers[&#x27;host&#x27;]; // Use 301 - Moved Permanently. // To notify browsers that update the bookmarks and cache the redirection. res.writeHead(301, &#123; Location: &#x27;https://&#x27; + host + req.url &#125;); res.end(); &#125;); // HTTPS server proxy. server.https = https.createServer(options, handler); return server;&#125; Koa 联调我们项目使用的 Koa，所以联调上方的基础方法： 1234567891011const app = new Koa();const server = enableHandlerHttps(app.callback(), &#123; keyPath: &#x27;&#x27;, // HTTPS cert key path. certPath: &#x27;&#x27;, // HTTPS cert file path. forceHttpsWhenEnabled: true // Enable.&#125;);server.listen(3000, function () &#123; // Server already started.&#125;);","tags":["Node.js"],"categories":["杂项"]},{"title":"Windows 下 Node.js 提示端口已被占用","path":"/20240424/windows-unexpected-eaddrinuse/","content":"可能的错误信息123Error: listen EADDRINUSE: address already in use :::3000Error: listen EACCES permission denied :::3000 可能的解决办法 3000 端口确实已经被监听。 &lt;管理员模式&gt; cmd 运行 netstat -ano|findstr &quot;3000&quot; ，然后找到对应的 PID，例如：1314，然后执行 taskkill -PID 1314 -F 。即可解决。 也许是因为 Hyper-V 或者其他的容器服务保留了该3000端口。 &lt;管理员模式&gt; cmd 运行 net stop hns，第一次执行时，会提示输入 y 确认。然后 cmd 运行 net start hns。即可解决。","tags":["Node.js","Windows"],"categories":["杂项","windows"]},{"title":"Hello, world!","path":"/20240423/hello-world/","content":"Hello world!Thanks for hexo, hexo-them-stellar and Github pages."},{"title":"关于","path":"/about/index.html","content":"关于王子凌一个前端菜鸟。 关于本站 本站没有任何推广和打赏链接，如果您觉得哪个作品不错，欢迎去对应的仓库点个赞，或者在对应的文章下面留言互动一下。 开源项目无任何盈利目的，只在工作闲暇时间进行维护，有相关需求请前往对应项目提 Issue 进行反馈，通过私人邮件询问开源项目问题可能得不到答复。"},{"title":"收藏","path":"/bookmark/index.html","content":"…"},{"title":"探索","path":"/explore/index.html","content":"…"},{"title":"Think","path":"/wiki/think/index.html","content":"Think"},{"title":"Vue","path":"/wiki/vue/index.html","content":"Vue"}]